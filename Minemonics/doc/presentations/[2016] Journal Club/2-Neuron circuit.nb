(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     24725,        543]
NotebookOptionsPosition[     24294,        524]
NotebookOutlinePosition[     24630,        539]
CellTagsIndexPosition[     24587,        536]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  StyleBox[
   RowBox[{
   "Presentation", " ", "of", " ", "the", " ", "2", " ", "Neuron", " ", 
    "circuit"}], "Title"], 
  StyleBox[" ", "Title"], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       StyleBox["\[Equal]",
        FontSize->18], 
       StyleBox[
        RowBox[{"2", " ", "Neuron", " ", "circuit"}],
        FontSize->18], 
       StyleBox["\[Equal]",
        FontSize->18], "\[IndentingNewLine]", 
       RowBox[{
        StyleBox[
         RowBox[{"the", " ", "double"}], "Text"], 
        StyleBox["-", "Text"], 
        StyleBox[
         RowBox[{"scroll", " ", "attractor", " ", 
          RowBox[{"(", 
           RowBox[{"sometimes", " ", "known", " ", "as", " ", 
            RowBox[{"Chua", "'"}], "s", " ", "attractor"}], ")"}], " ", "is", 
          " ", "a", " ", "strange", " ", "attractor", " ", "observed", " ", 
          "from", " ", "a", " ", "physical", " ", "electronic", " ", 
          "chaotic", " ", "circuit", " ", 
          RowBox[{"(", 
           RowBox[{"generally", ",", 
            RowBox[{
             RowBox[{"Chua", "'"}], "s", " ", "circuit"}]}], ")"}], " ", 
          "with", " ", "a", " ", "single", " ", "nonlinear", " ", "resistor", 
          " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"see", " ", 
             RowBox[{"Chua", "'"}], "s", " ", "Diode"}], ")"}], ".", "The"}], 
          " ", "double"}], "Text"], 
        StyleBox["-", "Text"], 
        StyleBox[
         RowBox[{
         "scroll", " ", "system", " ", "is", " ", "often", " ", "described", 
          " ", "by", " ", "a", " ", "system", " ", "of", " ", "three", " ", 
          "nonlinear", " ", "ordinary", " ", "differential", " ", "equations",
           " ", "and", " ", "a", " ", "3"}], "Text"], 
        StyleBox["-", "Text"], 
        StyleBox[
         RowBox[{"segment", " ", "piecewise"}], "Text"], 
        StyleBox["-", "Text"], 
        StyleBox[
         RowBox[{"linear", " ", "equation", " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"see", " ", 
             RowBox[{"Chua", "'"}], "s", " ", "equations"}], ")"}], ".", 
           "This"}], " ", "makes", " ", "the", " ", "system", " ", "easily", 
          " ", "simulated", " ", "numerically", " ", "and", " ", "easily", 
          " ", "manifested", " ", "physically", " ", "due", " ", "to", " ", 
          RowBox[{"Chua", "'"}], "s", " ", 
          RowBox[{"circuits", "'"}], " ", "simple", " ", 
          RowBox[{"design", "."}]}], "Text"], "\[IndentingNewLine]", "-", 
        RowBox[{"http", ":"}]}]}], "//", 
      RowBox[{
       RowBox[{"www", ".", "chuacircuits", ".", "com"}], "/", 
       "\[IndentingNewLine]", 
       RowBox[{"-", 
        StyleBox[
         RowBox[{"https", ":"}],
         FontSize->14]}]}]}], 
     StyleBox["//",
      FontSize->14], 
     RowBox[{
      StyleBox[
       RowBox[{
        RowBox[{
         RowBox[{"en", ".", "wikipedia", ".", "org"}], "/", "wiki"}], "/", 
        "Multiscroll_attractor"}],
       FontSize->14], 
      StyleBox["\[IndentingNewLine]",
       FontSize->14], 
      StyleBox[
       RowBox[{"dx", "/", "dt"}], "Code"]}]}], 
    StyleBox["=", "Code"], 
    StyleBox[
     RowBox[{
      RowBox[{
       RowBox[{"c1", "*", 
        RowBox[{"(", 
         RowBox[{"y", "-", "x", "-", 
          RowBox[{"f", 
           RowBox[{"(", "x", ")"}]}]}], ")"}]}], " ", "//", " ", 
       RowBox[{"m0", ":", " ", 
        RowBox[{"slope", " ", "in", " ", "outer", " ", "region"}]}]}], "\n", 
      "   ", 
      RowBox[{
       RowBox[{"dy", "/", "dt"}], "=", 
       RowBox[{
        RowBox[{"c2", "*", 
         RowBox[{"(", 
          RowBox[{"x", "-", "y", "+", "z"}], ")"}]}], "    ", "//", " ", 
        RowBox[{"m1", ":", " ", 
         RowBox[{"slope", " ", "in", " ", "inner", " ", "region"}]}]}]}], 
      "\n", "   ", 
      RowBox[{
       RowBox[{"dz", "/", "dt"}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "c3"}], "*", "y"}], "         ", "//", " ", 
        RowBox[{"b", ":", " ", "Breakpoints"}]}]}], "\n", "   ", 
      RowBox[{
       RowBox[{"f", 
        RowBox[{"(", "x", ")"}]}], "=", 
       RowBox[{
        RowBox[{"m1", "*", "x"}], "+", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"m0", "-", "m1"}], ")"}], "/", "2"}], "*", 
         RowBox[{"(", 
          RowBox[{"|", 
           RowBox[{"x", "+", "1"}], "|", 
           RowBox[{"-", 
            RowBox[{"|", 
             RowBox[{"x", "-", "1"}], "|"}]}]}], ")"}]}]}]}]}], "Code"]}], 
   "\[IndentingNewLine]", "*)"}]}]}], "Input",
 CellChangeTimes->{{3.6615983897242317`*^9, 3.6615985635652437`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"theta", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "3.4"}], ",", "3.8"}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Neuron", " ", "biases"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"w", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "22.0"}], ",", "5.9"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "6.6"}], ",", "0"}], "}"}]}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Neuron", " ", "weights"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"x", "  ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"neuron", " ", "activity", " ", "states", " ", "x_i", 
     RowBox[{"(", "t", ")"}]}], " ", "=", " ", 
    RowBox[{"[", 
     RowBox[{"0", ",", "1"}], "]"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"c", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "control", " ", "signals", " ", "depending", " ", "on", " ", "the", " ", 
    "desired", " ", "period", " ", 
    RowBox[{"(", 
     RowBox[{"c_i", " ", "=", " ", 
      RowBox[{"0", " ", "is", " ", "uncontrolled"}]}], " "}]}], "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"p", " ", "=", " ", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Sigma", "[", "x_", "]"}], " ", ":=", " ", 
    RowBox[{"1", "/", 
     RowBox[{"(", 
      RowBox[{"1", "+", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{"-", "x"}], "]"}]}], ")"}]}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Sigmoid", " ", "function"}], "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"neuronStep", " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "y", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"y", " ", "=", " ", 
        RowBox[{"Sigma", "[", 
         RowBox[{"theta", " ", "+", " ", 
          RowBox[{"w", ".", "x"}], " ", "+", " ", "c"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"x", " ", "=", " ", "y"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", " ", "[", "x", "]"}]}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"limitedNeuronStep", " ", ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "x", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"n", " ", "=", " ", "1000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"neuronPlot", "=", 
    RowBox[{"Table", "[", 
     RowBox[{"neuronStep", ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"neuronPlot", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
   RowBox[{"Axes", "\[Rule]", "True"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<t\>\"", ",", "\"\<x_1\>\""}], "}"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6615985200832872`*^9, 3.6616006222013283`*^9}, {
  3.66220111000203*^9, 3.662203978791916*^9}, {3.662297450380146*^9, 
  3.6622984786413517`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.24720000000000014`, 0.24, 0.6], PointBox[CompressedData["
1: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
kZnJ1CNcWN/57TKog+7rMrjYJPfYNlqZ4imXi9CK2br1W6gfms9F7prHFmr+
DF/j4soyV4dzP06T/7lo9dP4Odua8reKi5wd1c97E2n/dVz4uUe9O5zlR/nP
RfeWs7YLl9H+27g4MLxJ3PKQ8kHCxSX3h40BJ2j/nVwsGXlvqNMfpt/BxZSh
RavnWNJ7mV4uajxGyTm/o/1L8XAxdMzU1KvmlP881DrusBvzhPqbijw43+fy
9p+6QPjPQ+S35wtvJ1ST/3nYr3nxYrsL4a82D8NzfPfNHUD4q8PDQM3bP5vW
0v71ePC02aTrV8HcL/Mww2+YYL0v7d+Uh5oBHTHO2mR/cx4yy23074yk+2Ub
HnzNOxsEWrR/Fg8FuTKh3IfU3/fgQS/SOnO4G9mfzcOlnvBZufH03ieMh70h
NcODYpj3Pjw8Nel63ziV7C/kYejITumFP4l/pvFw6tZtbrE97T+Dh+V52hGt
U5n7Xh4emJpKnZ5K+8/nwfXg+WG91rT/Yh5OZy3Z/r5Z6t93OQ+j90fM3mDK
3E/wsCzxo2ga24H8z0PTI4dGyw8M/vPw5+aeUZ0nCgj/++ePGHv2ZwD1vyU8
zB939K/fJbJHJw9Kapnm8gfMyP882Mfd0l4yiNbr5SFoX5aH/+Bywv94KJRc
FGi+IXwbEg/14+c1DKoJnxXjkdUicW77KqL8j8fhHceHOpUy92XxeHz2Vk56
O/UTtOMhvob0ndcJ33Tika+2xvDJCspfvXg8fx4++U8f9RMQj7tP6x+aahN/
MY1HasqGgORF9F7JvH9+vN2F1jCSZxOPV1JyK+XLqP5kxUNUUfC97hzhm0c8
2kzlo4YdYeqNeJxSMq9kef0i/8eDX2F+/1kHU3/GY3W5W4TScXfyfzyUDF8J
R+URvqXFw/KjlPqP9AP/5mf071dL5NgcRf2E3Hj0VPfq1I+g+jE/HjULx1of
LKT7t+J4TH+rf+LDL8rH8ngU8NNjp36TJf/HY+LBBaUJ38l/dfEI3aZ99TGX
8rE5Hn+mRCwf3Er52BYPf9krcyxWXaT8jwd7RfX1cQWUj53xsHC6NLl2POVj
dzyaPIZ/MdHIIP/Ho+Gc/isrTeb9Fx87AuqjZt/fTfjPh3jo1MFLRjH9MD52
r396uq+M9q/Cx+Xl/KNzzsqR//k4GMXLj1pM/VNtPs6cPaE60nMV+Z8PV1nu
ynMPqJ7S42McO0ul5hHdZ4GPwrQcuZx1dJ9lysevzqRTE5UoHs35mJGyh+dV
R3zJho/bC6MPsLLovpzFR+0R1xadB+QvDz7aB56tNC6h94hsPqbscRr925/q
2TA+rH0ib4y8wbyv4kP/hgLrnq4K+b9/f0eifh/eTONpfEwyctQN3k/9gAw+
uCaeeWudyB65fESMNgv8qEn9oXw+3icFFiXcJ35YzMdo2y495Uw98j8fbosM
Cza7Mu8D+ChT1y8wNqP3U3V8CK3vaHqdI32b+bA/X2Lw7i+9x23jY7lcwbXD
yqSvhI9Q5cf3zvrRfWMnH9/kBQUL+XQ/1M1H08MTS0P66H6sl48o07hmZYWV
5H8B1p6bUfdIgeJriABKRe6ylvq1VA8JYHzA516jLt3nqwjwaK7RtrdzrpP/
BfgiZ+zzxp/u/7UFqJ8W2RS2ieJRR4CHe9cmF6+n+zQ9AQ5/qFi/kVVI578A
w/dHjDf5TPFhKkDbVPv7Co9JvrkAO4K3qb6uJ/k2AgR80vi4IIjWZwnQLT23
p3sZ1eMeAuzvGtAhr0/3z2wBInjHIbWb7B0mwKJA7R6W2hM6/wWIvFpdN34I
2VsowOZVgwT3ljH9WAHk9HYF/KdL+JkhQNPk0SNuOlE/NrffHvPdWKULKF7z
Bbix4crvHR5MvSrAZYul0i1a1E8rF8DBU9oi5gJzf9FvnwbtTHEx4WedAI5B
toe1Sgk/mwWwbo46M9iM8LNNgJm+DZd38Ag/JQKMtZs//vdvktcpAOt9CJ8n
TfK6BRjtqXO3IYbh/wL8mp0z2sKHeX+ZgEl+hU9f7WPqvwQMnBttK13C1H8J
yM4XpySZUD9WJQHVKz0qo3OY+jgBv6qHtiYrUf9OOwG+r+OWbbrK1H8JWDZ7
f1H4YOrH6iVgwC/HAw0S5n1DAu6Xz306MJryzTQBZ5fruxbuU6X8T8DtpEfJ
G2Up32wSoKz85PCD8fT+gZWArp3douHxxB89EtD6+YZ7z4kZ5P9++Tfiy+QK
SZ+wBCz0Ht/C/UT1LCcBG4OPKnjfJH2ECQi43zvoq5j6ZWkJOFnzpHL6KdIn
IwFmYwxfq6TRe5zcBPikG9m3GtJ5kJ+AsPUDZEuXkD7F/fu72hdinUXvN8sT
ULdbxgo5pE9VAiq3qB5SfSVP+N8vf5nXqm3nCU+bE+CV7G14UZ7eB7Ql4NG5
49+ebqd8kfTbe451+bq+25T/CXh7qyOu+DjdR3UnoELrxYDNIDzvTYCp8/Ez
pvuY/pcQSjvWy76oof71ECEKz1wfMPgA5YuiEOeVAiZ8WfWU/C/Ebw/F2KKb
9L5AXQgP9k+N4IVHyf9CZDamLZD/TXiiI8Qx7f82fs8rI//3r3/lcqpYnvIX
QswTi4cXs4lvmPb/PtrnxjQ1uu80F0IQP31Z+jHm/Bfi4CzVwSlD6H0fS4ib
29e+KOyjfPEQ4sMulYpWNcoXthCHPGRO4wH1u8OEGGS7I6CtlvgGRwj5SyzJ
7u1h5H8hHpaVl7Tbkbw0IX7JH09Yqk98L0OI9hVbe5fPIb6XK0RddliJxILi
K1+IUSsMrfyGSZP/hZA5GLn6hyPxvXIh9J+HCNrj6f1/lRCHvwW+PCIhfKkT
4spvndVz8o5T/SfEqhtrpoypI77X1m//dP3strXEFyRC3L7aFqJ6cyPlvxCm
3G2aPy1pvW4hgifyrof6n/23Xq8QQU9/fNt7mfivVCI0JhWtrRCQPYYk4r9r
loNEC6h+UkxE8kP5mGVCsodKItyULzacHkz4oZ6IESXB6m6hhB/aiRj5Y5PM
4Eayh04iKs7ZuZ3bS/WlXv93U4fDzZnMe+lEpH6UWjtkI9WXpon4M+iK/aCP
lG/miXAwiJfRuUj1pU0itvn1+JYPJfxgJaLd+6jJPQXKJ49EtOnWqi4eMYr8
nwjzoo8GMfaED2H938PlDofMof40JxFj9pYE1t+j/QoTsU5pt9L704R3aYng
X1f7UiNH+81IhO5M0YgZ16k+y01EXv6Rh69/0X7zEwGF3TY6D6m/UpyIS1Yq
S942Uv6VJ+Lwx+qiCj0m/xNhf71L31Wa+ENdInZmXA2/ksnc5ySi403Y2s4e
uj9vS0T21X3VwkMU35JERH9yrt/b+IHyPxEbBdv3Ds6h/kR3ImQnTa2bm5JI
+Z+IL/o3PwxIYPhfEn5n1yf++EH9giFJSLr+Vs8oivypmISsVEl73U2yj0oS
hq0siR7QSP5UT8IV20UelkvIPtpJ+MQxW7TjIv29jk4SCp3ESsIuso9eEg5+
fDtsuyrxMyRhUe3tPUEa5E/TJETMK8la+Ifw0zwJirfU3FoG09+L2CShnNM0
f2ox+ZOVhKkslfIS5enk/yR4943e8CmC4f9J2Dlj03B9OcrHsH59n91SNT7K
vM/u12/4sdjO1c7k/yRUtJzbu8+Y4f9JsBl54NBuw8OU/0lYs8ph012vS+T/
JHTI3J2RF014mp+ExCMqkdMnE98rTsLugTmfYyoIT8uTsHVOo+upl4+pf9uv
f7K8rLM04WldEkx6p6uWrKT3Rs1J+FpmMGq9EcP/k+BjYhFrYFVN538SzFYs
dW5YSvyrs3990X8vRzB8ujsJOektzpr3qN/am4TlbMHL1D2ER1IiqAkHVazQ
oPfGQ0QYukB9q0ctcx8gwndL+chg3gnCfxFmBqyp1dNl3oeJ0HvlWYhfKK2n
LcI73coEHzGtpyPCbKX5hr6PaD09EZqrjTJnDKL3ZhBBc9SYZ886Cd9MRXi2
OCx7iTrhm7kIoZ3vr05po36djQjeBTPXDmP6KywRVrxqexH4i/orHiL83O+p
FsD0V9giFL7ocDFn+ithIlw6OEp45CDlL0eEVlZOqB/TXxH2zw8L+7nvPvVX
0kSwM8y8Fl1IeJ8hwp3mwBeD/zL8XwTjlrKu5tXUX8kX4fXtkcstumj/xSLU
pehuX3SX6rlyEf5syNm/TkL+rBLh7MwcO90E6q/UifB+aev9qhg6H5tF4FqV
FR4IpXquTYS/mrtC3wbRexiJCEf8qn7P38z0/0Q4HCE4P2U5nVfdIrzY/HnT
Q2Paf68IixbOX9pnxPT/xMjsdC+fU0v5MUSMsYO+K0ofJ38qimG5tnXOuBZ6
n6cihsJRk6od58j+6mK0ZL66qdNH7/20xfBy9LoU5U/xoSOGupqcclEr5Zue
GNOvtw++N4H6HRAj3yAitmQR5ZupGBJBygcL5SPE/8UY+Ol1i85lyjcbMfx7
BiN6KOUbS4wvkrGdg8YvpfwXw++gWsHcqcSP2GLgzObPaafv0fkvhpOprKeJ
GdULnP79f/ctshbQ3y8Kxah0OtJ+0pPp/4lRkVAaGx1I/ZsMMdjKbrcmfSN9
csU4En71cYMvi/wvhs21SzBh3oMWi7Hn1syFzcx70HIxQqMmfBqxlXm/12/P
sDrryHnE9+rE0F2h+sXhLPG9ZjFeGHWde868B20Tw/yczMa6yVQ/S8Qo87Z6
+XY05XunGF3z3jjo5lE90i2G93DdL4c3EL70itHRVBq1tJPuG6SSUeiQ0Pz4
NPlzSDIUdvxaZKVN/lRMhn1u7TvXCPKnSjIiDHlHtl9m7n+Sofff2OHvZbZS
/idjxWv33xYrGf6fDKOv54etcSL81EtGzJbpF4pDyZ9IRlJmwnnF7eRP02SY
HDs6O/4s4ad5MqLuyT4fdou5/0nGnj16FUp5j4j/JWNigG2oeXoj+T8Z+asM
p/1Ro/qSnYzaLBv9IfVkv7BkrJud4NMpIPtxkrHG86/7qyyyn7Bf/rbhsxeu
IvxIS0ZCwWDTVcHETzOS0Xh2rHHsDeKnucnge5a6p++j/MtPhnJe1nvjL8RP
i5PRkro17MNUOk/LkyHTO0Hp4QDm7+mSsaVwZ285i+6H65Jhyu9UmGZEeNWc
jCs/1/GsK4PI/8lIb8m+9HkJ8/cMyQiZrlPj/5rwqjMZYrtfppLTlO/dyagv
9eGc+0l41du/v3F6Qw4Imb+fTEHjkuPOVX2EV0NSMHxqxs/LjoRXiin4mDjq
Luc24ZVKCo7dcbI5lkX9J/UUZH46yX92kfBKOwWGG3J3+/dQPa2TAj+bfZVv
vTMp/1OwQ6mvvpx5j4UUNAW+ThhpRvdxpilwk27qUucSXzJPgfv1u0Nn+DD1
XwoufFjcmGlF93GsFIyIlavnHqD48UjByAv1a57F03ssdgr8E8s6tLKY+j8F
V7PGPFM5RfUMJwXi7zG1Tu8oP4T9v3+zf3duBVP/99vjgdq4U2OY+j8FN9eL
ZZ71llD9lwKrIdxTvw8y9X//+jcnbNviSfyrOAXn1N0txgnpfqg8BUMM1c70
MfdDVSm4Nq9H/LGO7ofqUrDtuW/Q+FSm/k+BfEnssmJ3pv7v/73r6z+77el+
SJIC5a3GAmEaU/+noCTq63n5GLof6k5Bwz4jJUvmfqg3BT5GFX8d3hHfk0pF
6fLIy6qBTP2fCln/V3wJcz+kmApN0/RqAw/ieyqpiM8+n/Z3IlP/p6JQfSG3
r5X4u3YqvpX/d6auh8n/VPydNsFjgjvxd71UfO05PSj+C/kXqTBJwUTZic8M
/wdijOPn
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{
    FormBox["\"t\"", TraditionalForm], 
    FormBox["\"x_1\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  ImageSize->Large,
  Method->{},
  PlotRange->{{0, 1000.}, {0, 0.8402917283123725}},
  PlotRangeClipping->True,
  PlotRangePadding->{{20., 20.}, {0.01680583456624745, 
   0.01680583456624745}}]], "Output",
 CellChangeTimes->{{3.66220315554848*^9, 3.662203985842588*^9}, {
  3.662297459044421*^9, 3.6622984801425962`*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6622026763255177`*^9, 3.662202682800564*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6622032449355383`*^9, 3.662203244971333*^9}}]
},
WindowSize->{1434, 1524},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Linux x86 (64-bit) (February 7, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 4784, 130, 367, "Input"],
Cell[CellGroupData[{
Cell[5366, 154, 3670, 105, 473, "Input"],
Cell[9039, 261, 15045, 254, 387, "Output"]
}, Open  ]],
Cell[24099, 518, 94, 1, 32, "Input"],
Cell[24196, 521, 94, 1, 32, "Input"]
}
]
*)

(* End of internal cache information *)
