/*
 * Population.h
 *
 *  Created on: Mar 9, 2015
 *      Author: leviathan
 *
 *      From Lee Graham Thesis:
 *      The body tree of a creature is grown in a depth-first manner. The root segment is first
 * constructed, and then the entire subtree of its first enabled branch specification is
 * constructed, followed by the next enabled branch, and so on. This process is
 * recursive, so each subtree is constructed in the same manner. When a new segment
 * has been instantiated the physics engine is queried to obtain a list of all objects that
 * intersect the segment. A segment is permitted to intersect its own parent segment
 * since this is necessary anyway to allow for the full range of joint motion during
 * simulation. However, if a newly-instantiated segment is found to be intersecting some
 * other previously-instantiated part of the creature's body, other than its own parent
 * segment, the newly-instantiated segment will be deleted and none of its subtrees will
 * be constructed. This truncation of growth at intersecting branches ensures that a
 * newly-instantiated creature will not find itself suddenly experiencing the enormous
 * repulsion forces that would be generated by the physics engine attempting to resolve and remove such intersections. It can also cause a disruption of symmetry in some
 * bilaterally-symmetric creatures or their limbs.
 *
 * The final creature body produced during embryogenesis is guaranteed to be free of
 * segment intersections, except those between segments directly connect by a join. It
 * should be noted that in such cases the physics engine will not generate repulsion forces to
 * resolve the intersection. Segments connected by a common joint are permitted by the
 * physics engine to pass unimpeded through one another.
 */

#ifndef MODEL_EVOLUTION_POPULATION_POPULATIONMODEL_HPP_
#define MODEL_EVOLUTION_POPULATION_POPULATIONMODEL_HPP_

//# forward declarations
#include <vector>

//# system headers
//## controller headers
//## model headers
// include headers that implement a archive in xml format
#include <boost/archive/tmpdir.hpp>
#include <boost/archive/xml_iarchive.hpp>
#include <boost/archive/xml_oarchive.hpp>
#include <boost/serialization/vector.hpp>
#include <boost/serialization/version.hpp>
//## view headers
//# custom headers
//## base headers
//## configuration headers
//## controller headers
//## model headers
#include <model/evolution/population/creature/CreatureModel.hpp>

//## view headers
//## utils headers

/**
 * @brief		Brief
 * @details		Details
 * @date		2015-04-27
 * @author		Benjamin Ellenberger
 */
class PopulationModel {
public:
	PopulationModel();
	virtual ~PopulationModel();

	/**
	 * Initializes the population and adds creatures up to the creatureQty.
	 * @param creatureQty The number of creatures that the population will consist of in every generation.
	 */
	void initialize(int creatureQty);

	/**
	 * Adds a new creature to the population with the bushiness as a input.
	 * @param bushiness The bushiness determines the number of gene branches a gene has in this creature's genome.
	 */
	void addNewMember(double bushiness);

	/**
	 * Tests if a population is equal to another population.
	 * @param population The population to test for equality.
	 * @return If this population and the other are equal.
	 */
	bool equals(const PopulationModel & population) const;

	/**
	 * Give access to boost serialization
	 */
	friend class boost::serialization::access;

	/**
	 * Serializes the population to a string.
	 * @param os The ostream.
	 * @param creature The population we want to serialize.
	 * @return A string containing all information about the population.
	 */
	friend std::ostream & operator<<(std::ostream &os,
			const PopulationModel &population) {
		os << population.mCreatureQty;
		std::vector<CreatureModel*>::const_iterator it;
		for (it = population.mCreatures.begin();
				it != population.mCreatures.end(); it++) {
			os << (**it);
		}
		return os;

	}

	/**
	 * Serializes the creature to an xml file.
	 * @param ar The archive.
	 * @param The file version.
	 */
	template<class Archive>
	void serialize(Archive & ar, const unsigned int /* file_version */) {
		ar & BOOST_SERIALIZATION_NVP(mCreatureQty) & BOOST_SERIALIZATION_NVP(
				mCreatures);
	}

private:
	/**
	 * The creatures living in this population. All creatures in one population can mate together.
	 */
	std::vector<CreatureModel*> mCreatures;

	/**
	 * The number of creatures that the population will consist of in every generation.
	 */
	int mCreatureQty;
};

#endif /* MODEL_EVOLUTION_POPULATION_POPULATIONMODEL_HPP_ */
